//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/OldASets/Assets/Prifabs/CarController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarController"",
    ""maps"": [
        {
            ""name"": ""car"",
            ""id"": ""be1c02b4-4928-40c0-859b-d17dc985b6c1"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""200d0755-f8b5-410d-bf56-513c81aee7d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f7eab907-129d-470f-b626-d9d7bc48cddd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3618bceb-1f59-4f7b-bc16-9948de8c1459"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c135f724-4f1d-4c3b-8f7f-5202d71d14cf"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""car1"",
            ""id"": ""ee293cac-bac4-40ce-8e16-a79dc72d2515"",
            ""actions"": [
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""cb75978b-35c3-445c-a9fc-15facf8400c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SteerKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""7cd1726a-9d8c-4554-aea4-3dfe4bf96eb6"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DriveKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""d2e9e813-27ac-4959-a9d5-3a58dedea5d8"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5d59879b-d02b-441a-b016-63b52b1a6cdf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""02877c22-542e-420a-af03-1e3e38c95784"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""af78b281-1306-4a6f-8f13-51a3253ac565"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3641df59-611f-44fb-9fef-62bf51c33961"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""89cb1845-a77c-471b-acda-ad6452710792"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6bfdf4a7-3775-46a8-a2f3-ae293d7ae069"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9953ca7f-42cd-45ab-b377-2ca7b37cc8ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // car
        m_car = asset.FindActionMap("car", throwIfNotFound: true);
        m_car_Steer = m_car.FindAction("Steer", throwIfNotFound: true);
        m_car_Steer1 = m_car.FindAction("Steer1", throwIfNotFound: true);
        // car1
        m_car1 = asset.FindActionMap("car1", throwIfNotFound: true);
        m_car1_Brake = m_car1.FindAction("Brake", throwIfNotFound: true);
        m_car1_SteerKeyboard = m_car1.FindAction("SteerKeyboard", throwIfNotFound: true);
        m_car1_DriveKeyboard = m_car1.FindAction("DriveKeyboard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // car
    private readonly InputActionMap m_car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_car_Steer;
    private readonly InputAction m_car_Steer1;
    public struct CarActions
    {
        private @CarController m_Wrapper;
        public CarActions(@CarController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_car_Steer;
        public InputAction @Steer1 => m_Wrapper.m_car_Steer1;
        public InputActionMap Get() { return m_Wrapper.m_car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @Steer.started -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer;
                @Steer1.started -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer1;
                @Steer1.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer1;
                @Steer1.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnSteer1;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Steer1.started += instance.OnSteer1;
                @Steer1.performed += instance.OnSteer1;
                @Steer1.canceled += instance.OnSteer1;
            }
        }
    }
    public CarActions @car => new CarActions(this);

    // car1
    private readonly InputActionMap m_car1;
    private ICar1Actions m_Car1ActionsCallbackInterface;
    private readonly InputAction m_car1_Brake;
    private readonly InputAction m_car1_SteerKeyboard;
    private readonly InputAction m_car1_DriveKeyboard;
    public struct Car1Actions
    {
        private @CarController m_Wrapper;
        public Car1Actions(@CarController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Brake => m_Wrapper.m_car1_Brake;
        public InputAction @SteerKeyboard => m_Wrapper.m_car1_SteerKeyboard;
        public InputAction @DriveKeyboard => m_Wrapper.m_car1_DriveKeyboard;
        public InputActionMap Get() { return m_Wrapper.m_car1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Car1Actions set) { return set.Get(); }
        public void SetCallbacks(ICar1Actions instance)
        {
            if (m_Wrapper.m_Car1ActionsCallbackInterface != null)
            {
                @Brake.started -= m_Wrapper.m_Car1ActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_Car1ActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_Car1ActionsCallbackInterface.OnBrake;
                @SteerKeyboard.started -= m_Wrapper.m_Car1ActionsCallbackInterface.OnSteerKeyboard;
                @SteerKeyboard.performed -= m_Wrapper.m_Car1ActionsCallbackInterface.OnSteerKeyboard;
                @SteerKeyboard.canceled -= m_Wrapper.m_Car1ActionsCallbackInterface.OnSteerKeyboard;
                @DriveKeyboard.started -= m_Wrapper.m_Car1ActionsCallbackInterface.OnDriveKeyboard;
                @DriveKeyboard.performed -= m_Wrapper.m_Car1ActionsCallbackInterface.OnDriveKeyboard;
                @DriveKeyboard.canceled -= m_Wrapper.m_Car1ActionsCallbackInterface.OnDriveKeyboard;
            }
            m_Wrapper.m_Car1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @SteerKeyboard.started += instance.OnSteerKeyboard;
                @SteerKeyboard.performed += instance.OnSteerKeyboard;
                @SteerKeyboard.canceled += instance.OnSteerKeyboard;
                @DriveKeyboard.started += instance.OnDriveKeyboard;
                @DriveKeyboard.performed += instance.OnDriveKeyboard;
                @DriveKeyboard.canceled += instance.OnDriveKeyboard;
            }
        }
    }
    public Car1Actions @car1 => new Car1Actions(this);
    public interface ICarActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnSteer1(InputAction.CallbackContext context);
    }
    public interface ICar1Actions
    {
        void OnBrake(InputAction.CallbackContext context);
        void OnSteerKeyboard(InputAction.CallbackContext context);
        void OnDriveKeyboard(InputAction.CallbackContext context);
    }
}
